
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class PlayerPage extends StatefulWidget {
  final int? desiredPlayerID;

  const PlayerPage(this.desiredPlayerID, {Key? key}) : super(key: key);

  @override
  _PlayerPageState createState() => _PlayerPageState();
}

class _PlayerPageState extends State<PlayerPage> {
  final String url =
      "https://api.sportsdata.io/v3/nba/stats/json/PlayerSeasonStats/2023?key=44cdfada04e140fd9dbec09a04652b4f";
  Map<String, dynamic>? desiredElement;
  double perGame = 0.0;
  double ppg = 0.0;
  double mpg = 0.0;

  bool dataLoadingTimeout = false;
  late Timer dataLoadingTimer;

  @override
  void initState() {
    super.initState();
    fetchData();

    // Start the timer
    dataLoadingTimer = Timer(Duration(seconds: 3), () {
      setState(() {
        dataLoadingTimeout = true;
      });
    });
  }

  @override
  void dispose() {
    // Cancel the timer to avoid memory leaks
    dataLoadingTimer.cancel();
    super.dispose();
  }

  Future<void> fetchData() async {
    try {
      final response = await http.get(Uri.parse(url));
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        for (var element in data) {
          if (element["PlayerID"] == widget.desiredPlayerID) {
            setState(() {
              desiredElement = element;
              if (desiredElement!["Games"] != 0) {
                mpg = desiredElement!["Minutes"].toDouble() /
                    desiredElement!["Games"].toDouble();
                ppg = desiredElement!["Points"].toDouble() /
                    desiredElement!["Games"].toDouble();
              }
            });
            break;
          }
        }
      } else {
        print('Request failed with status: ${response.statusCode}.');
      }
    } catch (e) {
      print('Error fetching data: $e');
    }
  }

  Future<double> perGameGenerator(String top) async {
    try {
      final response = await http.get(Uri.parse(url));
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        for (var element in data) {
          if (element["PlayerID"] == widget.desiredPlayerID) {
            if (element["Games"] != 0) {
              double result = element[top].toDouble() /
                  element["Games"].toDouble();
              return result;
            }
          }
        }
      } else {
        print('Request failed with status: ${response.statusCode}.');
      }
    } catch (e) {
      print('Error fetching data: $e');
    }
    return 0.0; // Return a default value if the calculation fails
  }

  @override
  Widget build(BuildContext context) {
    double ppg = 0.0;
    if (desiredElement != null && desiredElement!["Games"] != 0) {
      ppg = desiredElement!["Points"].toDouble() /
          desiredElement!["Games"].toDouble();
    }

    return Scaffold(
      appBar: desiredElement != null
          ? AppBar(
        title: Text('${desiredElement!["Name"]}'),
        backgroundColor: Colors.green,
      )
          : null,
      body: Container(
        color: Colors.orange[100],
        padding: EdgeInsets.all(16.0),
        child: desiredElement != null
            ? Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Player Stats',
              style: TextStyle(
                fontSize: 24.0,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 16.0),
            Row(
              children: [
                _buildFixedTable(),
                Expanded(
                  child: _buildScrollableTable(),
                ),
              ],
            ),
            SizedBox(height: 16.0),
            Text(
              'Points Per Game',
              style: TextStyle(
                fontSize: 20.0,
                fontWeight: FontWeight.bold,
              ),
            ),
            Text(
              ppg.toStringAsFixed(2),
              style: TextStyle(
                fontSize: 48.0,
                fontWeight: FontWeight.bold,
              ),
            ),
            Text(
              'PlayerID: ${desiredElement!["PlayerID"]}',
              style: TextStyle(
                fontSize: 18.0,
                fontWeight: FontWeight.bold,
              ),
            ),
            Text(
              'Team: ${desiredElement!["Team"]}',
              style: TextStyle(
                fontSize: 18.0,
                fontWeight: FontWeight.bold,
              ),
            ),
            // Add more Text widgets for other attributes you want to display
          ],
        )
            : dataLoadingTimeout
            ? Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'No Stats Available',
                style: TextStyle(
                  fontSize: 18.0,
                  fontWeight: FontWeight.bold,
                ),
              ),
              SizedBox(height: 16.0),
              ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                },
                child: Text('Go Back'),
              ),
            ],
          ),
        )
            : Center(child: CircularProgressIndicator()),
      ),
    );
  }

  Widget _buildFixedTable() {
    return Padding(
      padding: const EdgeInsets.all(4),
      child: DataTable(
        columnSpacing: 30, // Adjust the column spacing here
        columns: const [
          DataColumn(
            label: Text(
              'Season',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'Team',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
        ],
        rows: [
          DataRow(

            cells: [
              DataCell(
                Text(
                  '${desiredElement!["Season"]}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!["Team"]}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildScrollableTable() {
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: DataTable(
        columnSpacing: 30, // Adjust the column spacing here
        dataRowHeight: 40, // Set the row height
        headingRowHeight: 50, // Set the heading row height
        dividerThickness: 1, // Set the divider thickness
        decoration: BoxDecoration(
          border: Border.all(
            color: Colors.grey,
            width: 5,
          ),
        ),
        columns: const [
          DataColumn(
            label: Text(
              'GP',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'GS',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'MIN',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'PPG',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'FGM',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'FGA',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'FG%',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              '2P%',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              '3PM',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              '3PA',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              '3P%',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'OR',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'DR',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'REB',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'AST',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'BLK',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'STL',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'PF',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          DataColumn(
            label: Text(
              'TO',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
        ],
        rows: [
          DataRow(
            cells: [
              DataCell(
                Text(
                  '${desiredElement!["Games"]}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!["Started"]}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${mpg.toStringAsFixed(2)}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${ppg.toStringAsFixed(2)}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['FieldGoalsMade'].toInt()}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['FieldGoalsAttempted'].toInt()}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['FieldGoalsPercentage']}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['TwoPointersPercentage']}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['ThreePointersMade'].toInt()}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['ThreePointersAttempted'].toInt()}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['ThreePointersPercentage']}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['OffensiveReboundsPercentage']}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['DefensiveReboundsPercentage']}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['TotalReboundsPercentage']}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['AssistsPercentage']}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['BlocksPercentage']}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['StealsPercentage']}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['PersonalFouls']}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
              DataCell(
                Text(
                  '${desiredElement!['Turnovers']}',
                  style: TextStyle(fontWeight: FontWeight.normal),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}






************Homepage
import 'package:flutter/material.dart';
import 'package:nba_stats/standings_page.dart';
import 'package:nba_stats/team_page.dart';

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String searchText = '';

  void navigateToTeamPage() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => TeamPage()),
    );
  }

  void navigateToStandingsPage() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => StandingsPage()),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Color(0xFF1f1545),
        title: Text('NBA Stats App'),
        actions: [
          IconButton(
            icon: Icon(Icons.search),
            onPressed: () {
              showSearch(
                context: context,
                delegate: CustomSearchDelegate(),
              );
            },
          ),
        ],
      ),
      body: Container(
        color: Colors.orange[200],
        child: Column(
          children: [
            Container(
              color: Color(0xFF1f1545),
              child: ListTile(
                textColor: Colors.white,
                title: Text('Team Page'),
                onTap: navigateToTeamPage,
              ),
            ),
            Container(
              color: Color(0xFF1f1545),
              child: ListTile(
                textColor: Colors.white,
                title: Text('Standings'),
                onTap: navigateToStandingsPage,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class CustomSearchDelegate extends SearchDelegate<String> {
  String get searchFieldLabel => 'Player Search';

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      IconButton(
        icon: Icon(Icons.clear),
        onPressed: () {
          query = '';
        },
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: Icon(Icons.arrow_back),
      onPressed: () {
        close(context, '');
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    // Implement the search results UI based on the query
    return Container();
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    // Implement the search suggestions UI based on the query
    return Container();
  }
}
